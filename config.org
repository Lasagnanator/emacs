#+TITLE: Lasagna's emacs config
#+AUTHOR: Lasagnanator

* General configuration

** Variables

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)
  (setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
  (setq display-line-numbers-type 'visual)
  (setq history-length 25)
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)
  (setq use-dialog-box nil)
  (setq global-auto-revert-non-file-buffers t) ; For Dired
  (setq scroll-step 1)
  (setq scroll-margin 4)
  (setq scroll-conservatively 9999)
  (setq enable-recursive-minibuffers t)
  (setq tramp-shell-prompt-pattern "\\(?:^\\|\r\\)[^]#$%>\n]*#?[]#$%>].* *\\(^[\\[[0-9;]*[a-zA-Z] *\\)*") ; TODO: change section

#+end_src

** Modes

#+begin_src emacs-lisp

  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (column-number-mode)
  (global-display-line-numbers-mode t)
  ;; Disable line numbers for some modes
  (dolist (mode '(term-mode-hook
		  eshell-mode-hook
		  vterm-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
  (recentf-mode 1)
  (savehist-mode 1)
  (save-place-mode 1)
  (global-auto-revert-mode 1)
  (set-fringe-mode 10)
  (tooltip-mode 0)
  (electric-indent-mode nil)
  (delete-selection-mode 1)
  (electric-pair-mode 1)

#+end_src

** Keys

#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

* Package manager

** Bootstrap

#+begin_src emacs-lisp

  (defvar elpaca-installer-version 0.6)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (call-process "git" nil buffer t "clone"
					 (plist-get order :repo) repo)))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))

	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

#+end_src

** Use-package

#+begin_src emacs-lisp

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))
  ;; Block until current queue processed.
  (elpaca-wait)

#+end_src

* Utilities

** Evil mode

#+begin_src emacs-lisp

  (use-package evil
    :init ; tweak evil's configuration before loading it
    (setq evil-want-integration t) ; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-redo)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-want-C-u-scroll t)
    :config
    ; (evil-define-key 'normal 'global (kbd "M-h") 'evil-window-left)
    ; (evil-define-key 'normal 'global (kbd "M-j") 'evil-window-down)
    ; (evil-define-key 'normal 'global (kbd "M-k") 'evil-window-up)
    ; (evil-define-key 'normal 'global (kbd "M-l") 'evil-window-right)
   (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    ; (setq evil-collection-mode-list '(dashboard dired ibuffer magit)) ; if I want to set evil binds for only some modes
    (evil-collection-init))
  (use-package evil-tutor)

#+end_src

** General

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-evil-setup)
    (general-create-definer leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"			; set leader
      :global-prefix "M-SPC")		; access leader in insert mode

    ;; Buffer
    (leader-keys
      "b" '(:ignore t :wk "Buffer")
      "b d" '(kill-this-buffer :wk "Kill this buffer")
      "b r" '(revert-buffer :wk "Reload buffer")
      "b i" '(ibuffer :wk "Open ibuffer")
      "b s" '(basic-save-buffer :wk "Save buffer")
      "b S" '(evil-write-all :wk "Save all buffers"))

    ;; Windows
    (leader-keys
      "w" '(:ignore t :wk "Window")
      "w q" '(evil-quit :wk "Quit window"))

    ;; Files and folders
    (leader-keys
      "f" '(:ignore t :wk "Files")
      "f f" '(find-file :wk "Find file")
      "f r" '(recentf :wk "Recent files"))

    ;; Sessions
    (leader-keys
      "q" '(:ignore t :wk "Session")
      "q q" '(save-buffers-kill-terminal :wk))

    ;; Tabs and workspaces
    (leader-keys
      "TAB" '(:ignore t :wk "Tabs"))

    ;; Help and other functions
    (leader-keys
      "h" '(:ignore t :wk "H")
      "h t" '(load-theme :wk "Load theme"))

    ;; Git
    (leader-keys
      "g" '(:ignore t :wk Git)
      "g g" '(magit :wk "Magit")))

#+end_src

** Which-key

#+begin_src emacs-lisp

  (use-package which-key
    :config
    (which-key-mode))

#+end_src

** Pickers

*** Vertico

#+begin_src emacs-lisp

  (use-package vertico
    :init
    (vertico-mode)
    (savehist-mode)
    (setq vertico-scroll-margin 2)
    (setq vertico-count 15)
    (setq vertico-resize nil)
    :bind
    (:map vertico-map
	  ("C-j" . vertico-next)
	  ("C-k" . vertico-previous)
	  ("DEL" . vertico-directory-delete-char)))

#+end_src

*** Consult

#+begin_src emacs-lisp

  (use-package consult
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :init
    (setq register-preview-delay 0.5
	  register-preview-function #'consult-register-format)
    (advice-add #'register-preview :override #'consult-register-window)
    :config
    (setq consult-narrow-key "<"))

#+end_src

*** Orderless

#+begin_src emacs-lisp

  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))

#+end_src

*** Marginalia

#+begin_src emacs-lisp

  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
	   ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))

#+end_src

** Helpful

#+begin_src emacs-lisp

  (use-package helpful
    :config
    (global-set-key (kbd "C-h f") #'helpful-callable)
    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
    (global-set-key (kbd "C-h x") #'helpful-command)
    (global-set-key (kbd "C-c C-d") #'helpful-at-point)
    (global-set-key (kbd "C-h F") #'helpful-function))

#+end_src

** Treemacs

#+begin_src emacs-lisp

(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode 'always)
  (when treemacs-python-executable
    (treemacs-git-commit-diff-mode t))
  (pcase (cons (not (null (executable-find "git")))
               (not (null treemacs-python-executable)))
    (`(t . t)
     (treemacs-git-mode 'deferred))
    (`(t . _)
     (treemacs-git-mode 'simple)))

  (treemacs-hide-gitignored-files-mode nil))

#+end_src

*** Additional packages

#+begin_src emacs-lisp

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

#+end_src

** Terminal

#+begin_src emacs-lisp

  (use-package vterm)

#+end_src

** Evil-surround

#+begin_src emacs-lisp

  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))

#+end_src

** Commentary

#+begin_src emacs-lisp

  (use-package evil-commentary
    :config
    (evil-commentary-mode))

#+end_src

** Sudo-edit

#+begin_src emacs-lisp

  (use-package sudo-edit)

#+end_src

* Interface

** Themes

*** Doom themes megapack

#+begin_src emacs-lisp

  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-dracula t)

    (doom-themes-visual-bell-config)
    (setq doom-themes-treemacs-theme "doom-colors")
    (doom-themes-treemacs-config)
    (doom-themes-org-config))

#+end_src

*** Catppuccin

#+begin_src emacs-lisp

  (use-package catppuccin-theme
    :init (setq catppuccin-flavour 'mocha)
    ; :config
    ; (load-theme 'catppuccin t)
    )

#+end_src

*** Dracula

#+begin_src emacs-lisp

  (use-package dracula-theme)
    ;:config
    ;(load-theme 'dracula t))

#+end_src

** Fonts

#+begin_src emacs-lisp

  (add-to-list 'default-frame-alist
	       '(font . "JetBrains Mono-12"))

#+end_src

** Doom modeline

#+begin_src emacs-lisp

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Icons

#+begin_src emacs-lisp

  (use-package all-the-icons
    :if (display-graphic-p))

#+end_src

** Dired customizations

#+begin_src emacs-lisp

  (use-package diredfl
    :config
    (diredfl-global-mode))

  (use-package all-the-icons-dired)

#+end_src

** Highlight motions

#+begin_src emacs-lisp

  (use-package evil-goggles
    :init
    (setq evil-goggles-pulse t
	  evil-goggles-enable-yank t
	  evil-goggles-enable-undo t
	  evil-goggles-enable-redo t
	  evil-goggles-enable-delete nil)
    :config
    (evil-goggles-mode))

#+end_src

* Git

** Magit

#+begin_src emacs-lisp

  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

** Forge

#+begin_src emacs-lisp

  (use-package forge)

#+end_src

** Projectile

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

#+end_src

*** Counsel-projectile

#+begin_src emacs-lisp

  (use-package counsel-projectile
    :after (counsel projectile)
    :config
    (counsel-projectile-mode))

#+end_src

* IDE

** Highlighting

*** Tree-sitter

#+begin_src emacs-lisp

  (setq treesit-font-lock-level 4)
  (setq treesit-language-source-alist
    '((python "https://github.com/tree-sitter/tree-sitter-python")
      (lua "https://github.com/Azganoth/tree-sitter-lua")))

#+end_src

*** Treesit-auto

#+begin_src emacs-lisp

  (use-package treesit-auto
    :config
    (global-treesit-auto-mode))

#+end_src

** To-do highlighting

#+begin_src emacs-lisp

  (use-package hl-todo
    :config
    (global-hl-todo-mode))

#+end_src

*** Extra packages

#+begin_src emacs-lisp

  (use-package flycheck-hl-todo
    :after flycheck
    :config
    (flycheck-hl-todo-setup))

  (use-package magit-todos
    :after magit
    :config
    (magit-todos-mode))

  (use-package consult-todo
    :after consult)

#+end_src

** LSP

#+begin_src emacs-lisp

  (use-package lsp-mode
    :hook ((lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

#+end_src

*** Optional packages

#+begin_src emacs-lisp

  (use-package lsp-ui 
    :commands lsp-ui-mode)
  ; (use-package lsp-ivy
  ;   :commands lsp-ivy-workspace-symbol)
  ; (use-package lsp-treemacs
  ;   :commands lsp-treemacs-errors-list)

#+end_src

** Completion

#+begin_src emacs-lisp

  (use-package company
    :custom
    (company-minimum-prefix-length 2)
    (global-company-mode t))

  (use-package company-box
    :after company
    :hook (company-mode . company-box-mode))

#+end_src

** Snippets

#+begin_src emacs-lisp

  (use-package yasnippet)

#+end_src

** Linting

#+begin_src emacs-lisp

  (use-package flycheck
    :init
    (setq flycheck-global-modes '(not org-mode))
    (setq flycheck-disabled-checkers '(emacs-lisp-checkdoc))
    :config
    (global-flycheck-mode))

#+end_src

** Debugger

#+begin_src emacs-lisp

  (use-package dap-mode)

#+end_src

** Languages

*** Rich HTML

#+begin_src emacs-lisp

  (use-package web-mode)

#+end_src

*** Lua

#+begin_src emacs-lisp

  (use-package lua-mode
    :config (lsp))

#+end_src

*** Python

#+begin_src emacs-lisp

  (use-package lsp-pyright
    :ensure t
    :hook (python-ts-mode . (lambda ()
			     (require 'lsp-pyright)
			     (lsp))))  ; or lsp-deferred

#+end_src

*** Javascript

#+begin_src emacs-lisp

  (use-package rjsx-mode
    :hook (js-ts-mode))

#+end_src

*** Fish

#+begin_src emacs-lisp

  (use-package fish-mode)

#+end_src

*** Yuck

#+begin_src emacs-lisp

  (use-package yuck-mode)

#+end_src

*** Emacs Lisp

**** Lispyville

#+begin_src emacs-lisp

  (use-package lispyville
    :hook (emacs-lisp-mode lisp-mode)
    :config
    (lispyville-set-key-theme
     '(operators
       c-w
       prettify
       commentary
       slurp/barf-cp
       additional
       additional-motions
       additional-insert
       atom-motions
       text-objects)))

#+end_src

* ORG Mode

** Settings

#+begin_src emacs-lisp

  (setq org-hide-emphasis-markers t)
  (add-hook 'org-mode-hook (lambda ()
			     (setq-local electric-pair-mode nil)))

#+end_src

** Org-tempo

#+begin_src emacs-lisp

  (require 'org-tempo)

#+end_src

* TODO List [0/8]

** TODO IDE [2/4]

- [X] Add basic LSP functionality
- [ ] Add Treesitter (maybe)
- [X] Check why the Python LSP is giving fewer results than Neovim
      It was the fault of the font lock level.
- [ ] Dap mode for as many languages as possible

*** Languages [0/15]

- [ ] Bash
- [ ] Python
- [ ] Lua
- [ ] C/C++
- [ ] Javascript/Typescript
- [ ] JSON
- [ ] YAML
- [ ] Ansible
- [ ] Docker
- [ ] Go
- [ ] Rust
- [ ] PHP
- [ ] Vue (?)
- [ ] Haskell (?)
- [ ] Ruby (?)

** TODO Keybinds [0/4]

*** TODO Common [0/3]

- [ ] Binds for treemacs
- [ ] Hydra? At least for windows
- [ ] /Ctrl-;/ as /ESC/

*** TODO Evil [1/1]

- [X] /Ctrl-U/ normal Vim behaviour

*** TODO Buffer [/]

- [ ] ibuffer workspace

*** TODO Vertico [2/4]

- [X] /Ctrl-j/ go down
- [X] /Ctrl-k/ go up
- [ ] /Ctrl-h/ delete path until slash
- [ ] /Ctrl-l/ select

*** TODO Git [1/1]

- [X] /SPC g g/ open Magit  
  
** TODO Org mode [0/4]

- [ ] Different font sizes in client
- [ ] Concealers (title/block)
- [ ] Auto indentation
- [ ] Shortcut for emacs-lisp source block

*** TODO modes to check [0/3]

- [ ] Org-roam
- [ ] Org-agenda (built-in)
- [ ] Org-schedule (built-in)
- [ ] Org-capture
- [ ] Org-export

** TODO Doom [0/2]

*** TODO Confirmed [1/9]

    - [ ] Interactive terminal
    - [ ] Workspaces
    - [ ] Dashboard
    - [X] Ophints (evil-goggles)
    - [ ] Folds (hideshow)
    - [ ] PDF (pdf-tools)
    - [ ] File templates (it should be bundled with yasnippet)
    - [ ] Lookup (dictionaries and online search)
    - [ ] Upload (ssh-deploy)

*** TODO Evaluating [0/5]

    - [ ] Web
    - [ ] Word-wrap
    - [ ] Direnv
    - [ ] Password-keeper
    - [ ] Taskrunner

** TODO Additions [1/9]

- [X] Flash of yanked region
- [ ] Center after every screen and half-screen movement
- [ ] Center after every search jump
- [ ] Bind /CTRL+;/ to /ESC/ in client
- [ ] Rainbow mode
- [ ] Highlight tabs in code
- [ ] Preview of last search with /
- [ ] Highlight what is being changed with /:s/
- [ ] Highlight result of /f/ and /t/ keys

** TODO Fixes [2/5]

- [X] Scrolling
- [ ] Replace global tsserver and typescript when ts-ls is fixed
- [ ] Tab should work like everywhere else
- [X] Icons not showing in client
- [ ] Fixed width gutter and numbers
- [ ] Always use spaces instead of tabs

** TODO Packages [0/11]

- [ ] [[https://github.com/dgutov/diff-hl][diff-hl]]
- [ ] [[https://github.com/emacsmirror/diminish][diminish]]
- [ ] [[https://github.com/kuanyui/tldr.el][tldr]]
- [ ] [[https://github.com/vedang/pdf-tools/][pdf-tools]]
- [ ] [[https://github.com/emacsfodder/kurecolor][kurecolor]]
- [ ] [[https://github.com/protesilaos/dired-preview][dired-preview]]
- [ ] [[https://github.com/Fuco1/dired-hacks/tree/master][dired-hacks]] (dired-open)
- [ ] [[https://github.com/emacsorphanage/anzu][anzu]]
- [ ] [[https://github.com/clemera/objed][objed]]
- [ ] [[https://github.com/tumashu/posframe][postframe]] (flycheck)
- [ ] [[https://github.com/auto-complete/popup-el][popup]] (flycheck)

** TODO Move stuff from the config directory to a fixed one [0/3]

- [ ] Temporary files
- [ ] Autosave files
- [ ] All package files
