#+TITLE: Lasagna's emacs config
#+AUTHOR: Lasagnanator

* Base setup

** Path setup

Add to the path the folders from which the additional scripts should be sourced.

#+begin_src emacs-lisp

  (add-to-list 'load-path (concat user-emacs-directory "setup-scripts"))

#+end_src

** Package manager

Bootstrap /elpaca/ and set it as default when ~use-package~ is called.

#+begin_src emacs-lisp
  
  (require 'elpaca)

#+end_src

* Evil mode

/No vim, no party./

#+begin_src emacs-lisp

  ;; (require 'evil)
  (use-package evil
    :init			; tweak evil's configuration before loading it
    (setq evil-want-integration t) ; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-redo)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
					  ; (setq evil-collection-mode-list '(dashboard dired ibuffer magit)) ; if I want to set evil binds for only some modes
    (evil-collection-init))
  (use-package evil-tutor)

#+end_src

* Configuration

General Emacs variables.

** Settings

**** TODO check all the settings applied here and evaluate them

#+begin_src emacs-lisp

  ;; Variables
  (setq inhibit-startup-message t
	backup-directory-alist '((".*" . "~/.local/share/Trash/files"))
	display-line-numbers-type 'visual
	history-length 25
	use-dialog-box nil
	global-auto-revert-non-file-buffers t ; For Dired
	scroll-step 1
	scroll-margin 4
	scroll-conservatively 9999
	enable-recursive-minibuffers t
	tramp-shell-prompt-pattern "\\(?:^\\|\r\\)[^]#$%>\n]*#?[]#$%>].* *\\(^[\\[[0-9;]*[a-zA-Z] *\\)*") ; TODO: change section
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Modes
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (recentf-mode 1)
  (savehist-mode 1)
  (save-place-mode 1)
  (global-auto-revert-mode 1)
  (set-fringe-mode 10)
  (tooltip-mode 0)
  (delete-selection-mode 1)
  (electric-indent-mode 0)
  (electric-pair-mode 1)

  ;; Set custom file
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)

  ;; Disable line numbers for some modes
  (dolist (mode '(term-mode-hook
		  eshell-mode-hook
		  vterm-mode-hook
		  treemacs-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

* Keybinds

** Custom keys

#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (define-key key-translation-map ["C-;"] (kbd "<escape>"))

#+end_src

** General

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-evil-setup)
    (general-create-definer leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"			; set leader
      :global-prefix "M-SPC")		; access leader in insert mode

    (general-create-definer next-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "]"			; set leader
      :global-prefix "M-]")		; access leader in insert mode

    (general-create-definer prev-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "["			; set leader
      :global-prefix "M-[")		; access leader in insert mode

    ;; Buffer
    (leader-keys
      "b" '(:ignore t :wk "Buffer")
      "b d" '(kill-this-buffer :wk "Kill this buffer")
      "b b" '(consult-buffer :wk "Open buffers list")
      "b r" '(revert-buffer :wk "Reload buffer")
      "b i" '(ibuffer :wk "Open ibuffer")
      "b s" '(basic-save-buffer :wk "Save buffer")
      "b S" '(evil-write-all :wk "Save all buffers"))
    (next-keys "b" '(next-buffer :wk "Next buffer"))
    (prev-keys "b" '(previous-buffer :wk "Previous buffer"))

    ;; Windows
    (leader-keys
      "w" '(:ignore t :wk "Window")
      "w q" '(evil-quit :wk "Quit window"))

    ;; Files and folders
    (leader-keys
      "f" '(:ignore t :wk "Files")
      "f f" '(find-file :wk "Find file")
      "f r" '(recentf :wk "Recent files")
      "f -" '(dired-jump :wk "Open dired in cwd"))

    ;; Sessions
    (leader-keys
      "q" '(:ignore t :wk "Session")
      "q q" '(save-buffers-kill-terminal :wk))

    ;; Tabs and workspaces
    (leader-keys
      "TAB" '(:ignore t :wk "Tabs")
      "TAB l" '(persp-switch :wk "Choose workspace")
      "TAB n" '(persp-switch :wk "Choose workspace"))
    (next-keys "TAB" '(persp-next :wk "Next workspace"))
    (prev-keys "TAB" '(persp-prev :wk "Previous workspace"))

    (leader-keys
      "o" '(:ignore t :wk "Open")
      "o e" '(treemacs :wk "Open Treemacs"))

    ;; Help and other functions
    (leader-keys
      "h" '(:ignore t :wk "H")
      "h t" '(consult-theme :wk "Load theme"))

    ;; Git
    (leader-keys
      "g" '(:ignore t :wk "Git")
      "g g" '(magit :wk "Magit"))

    ;; Modes
    (leader-keys
      "m" '(:ignore t :wk "Mode-specific")))

#+end_src

** Which-key

#+begin_src emacs-lisp

  (use-package which-key
    :config
    (which-key-mode))

#+end_src

** Evil-surround

#+begin_src emacs-lisp

  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))

#+end_src

** Commentary

#+begin_src emacs-lisp

  (use-package evil-commentary
    :config
    (evil-commentary-mode))

#+end_src

* Interface and eye-candy

** Themes

The theme to load at startup.

#+begin_src emacs-lisp

  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (load-theme 'doom-palenight t)))

#+end_src

*** Doom themes

Themes from the Doom distro. Probably the themes that are closer to Neovim's ones.
Nice themes to consider:
- doom-challenger-deep
- doom-dracula
- doom-fairy-floss
- doom-gruvbox
- doom-henna
- doom-horizon
- doom-lantern
- doom-laserwave
- doom-moonlight
- doom-nord-aurora
- doom-oceanic-next
- doom-outrun-electric
- doom-palenight
- doom-shades-of-purple
- doom-solarized-dark
- doom-tokyo-night
- doom-vibrant

**** TODO expand on the list of useful themes

#+begin_src emacs-lisp

  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
	  doom-themes-enable-italic t)
    (doom-themes-visual-bell-config)
    (setq doom-themes-treemacs-theme "doom-colors")
    (doom-themes-treemacs-config)
    (doom-themes-org-config))

#+end_src

*** Catppuccin

Best theme, but with too little syntax highlighting.

#+begin_src emacs-lisp

  (use-package catppuccin-theme
    :init (setq catppuccin-flavour 'mocha))

#+end_src

** Fonts

Fonts for the graphical client.

#+begin_src emacs-lisp

  (add-to-list 'default-frame-alist
	       '(font . "JetBrains Mono-12"))

#+end_src

** Doom modeline

#+begin_src emacs-lisp

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Icons

Package containing icons for the graphical client.
It still needs to be installed with commands on a fresh clone.

#+begin_src emacs-lisp

  (use-package all-the-icons
    :if (display-graphic-p))

#+end_src

** Colorful Dired

Add colors to the builtin file manager.

#+begin_src emacs-lisp

  (use-package diredfl
    :config
    (diredfl-global-mode))

  (use-package all-the-icons-dired)

#+end_src

** Highlight Vim motions

#+begin_src emacs-lisp

  (use-package evil-goggles
    :init
    (setq evil-goggles-pulse t
	  evil-goggles-enable-yank t
	  evil-goggles-enable-undo t
	  evil-goggles-enable-redo t
	  evil-goggles-enable-delete nil)
    :config
    (evil-goggles-mode))

#+end_src

* Additional functions

Add functionality to Emacs for a better writing experience.

** Vertico

Modern completion UI.

#+begin_src emacs-lisp

  (use-package vertico
    :init
    (vertico-mode)
    (savehist-mode)
    (setq vertico-scroll-margin 2)
    (setq vertico-count 15)
    (setq vertico-resize nil)
    :bind
    (:map vertico-map
	  ("C-j" . vertico-next)
	  ("C-k" . vertico-previous)
	  ("C-h" . vertico-directory-up)
	  ("DEL" . vertico-directory-delete-char)))

#+end_src

*** Orderless

Completion style that searches for unordered combinations of words, separated by spaces.

#+begin_src emacs-lisp

  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))

#+end_src

*** Marginalia

Add marks and annotations to search results in minibuffer and completion.

#+begin_src emacs-lisp

  (use-package marginalia
    :bind (:map minibuffer-local-map
	   ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))

#+end_src

** Consult

Enhanced search and navigation commands. Substitutes functions like /buffers/ and /imenu/.

#+begin_src emacs-lisp

  (use-package consult
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :init
    (setq register-preview-delay 0.5
	  register-preview-function #'consult-register-format)
    (advice-add #'register-preview :override #'consult-register-window)
    :config
    ;; (add-to-list 'consult-buffer-sources 'persp-consult-source)
    (setq consult-narrow-key "<"))

#+end_src

** Helpful

Better help commands.

#+begin_src emacs-lisp

  (use-package helpful
    :config
    (global-set-key (kbd "C-h f") #'helpful-callable)
    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
    (global-set-key (kbd "C-h x") #'helpful-command)
    (global-set-key (kbd "C-c C-d") #'helpful-at-point)
    (global-set-key (kbd "C-h F") #'helpful-function))

#+end_src

** Treemacs

Add tree-style views to Emacs.

#+begin_src emacs-lisp

  (use-package treemacs
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))
    (pcase (cons (not (null (executable-find "git")))
		 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))
    (treemacs-hide-gitignored-files-mode nil))

#+end_src

*** Integrations

#+begin_src emacs-lisp

  (use-package treemacs-evil
    :after (treemacs evil))
  (use-package treemacs-projectile
    :after (treemacs projectile))
  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once))
  (use-package treemacs-magit
    :after (treemacs magit))

#+end_src

** Terminal emulator

#+begin_src emacs-lisp

  (when (display-graphic-p)
      (use-package vterm))

#+end_src

** Sudo-edit

#+begin_src emacs-lisp

  (use-package sudo-edit)

#+end_src

* Git

** Magit

Git interface for managing repositories as a text buffer.

#+begin_src emacs-lisp

  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

** Forge

Magit integration with services like GitHub and GitLab.

#+begin_src emacs-lisp

  (use-package forge)

#+end_src

** Projectile

Project managemet.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (setq projectile-switch-project-action #'projectile-dired))

#+end_src

* IDE and development

** Tree-sitter

#+begin_src emacs-lisp

  (setq treesit-font-lock-level 4)
  (setq treesit-language-source-alist
    '((python "https://github.com/tree-sitter/tree-sitter-python")
      (lua "https://github.com/Azganoth/tree-sitter-lua")))

#+end_src

** To-do highlighting

**** TODO Add more highlighted words

#+begin_src emacs-lisp

  (use-package hl-todo
    :config
    (global-hl-todo-mode))

#+end_src

*** To-do highlighting integration

#+begin_src emacs-lisp

  (use-package flycheck-hl-todo
    :after flycheck
    :config
    (flycheck-hl-todo-setup))
  (use-package magit-todos
    :after magit
    :config
    (magit-todos-mode))
  (use-package consult-todo
    :after consult)

#+end_src

** Language Server Protocol

Integration with LSP.

#+begin_src emacs-lisp

  (use-package lsp-mode
    :hook ((prog-mode . lsp)
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

#+end_src

*** LSP UI

Integration of ~lsp-mode~ with UI elements like Flycheck and code lenses.
Provides side line diagnostic, peek, docstrings and menu.

#+begin_src emacs-lisp

  (use-package lsp-ui 
    :commands lsp-ui-mode)
  ; (use-package lsp-treemacs
  ;   :commands lsp-treemacs-errors-list)

#+end_src

** Debug Adapter Protocol

Integraton with DAP.

#+begin_src emacs-lisp

  (use-package dap-mode)

#+end_src

** Company

A completion framework with multiple backends.

#+begin_src emacs-lisp

  (use-package company
    :custom
    (company-minimum-prefix-length 2)
    (global-company-mode t))

  (use-package company-box
    :after company
    :hook (company-mode . company-box-mode))

#+end_src

** Yasnippet

Snippet engine for multiple languages.

#+begin_src emacs-lisp

  (use-package yasnippet)

#+end_src

** Flycheck

Linter interface for marking errors and code suggestions inside the editor.

#+begin_src emacs-lisp

  (use-package flycheck
    :init
    (setq flycheck-global-modes '(not org-mode))
    (setq flycheck-disabled-checkers '(emacs-lisp-checkdoc))
    :config
    (global-flycheck-mode))

#+end_src

** Languages

Specific modes, configurations and packages for single languages.

*** HTML and templating

#+begin_src emacs-lisp

  (use-package web-mode)

#+end_src

*** Lua

#+begin_src emacs-lisp

  (use-package lua-mode
    :config (lsp))

#+end_src

*** Python

#+begin_src emacs-lisp

  (use-package lsp-pyright
    :hook (python-mode . (lambda ()
			     (require 'lsp-pyright)
			     (lsp))))  ; or lsp-deferred

#+end_src

*** Javascript

#+begin_src emacs-lisp

  (use-package rjsx-mode
    :hook (js-mode)
    :config (lsp))

#+end_src

*** Yuck

#+begin_src emacs-lisp

  (use-package yuck-mode)

#+end_src

*** Emacs Lisp

**** Lispyville

#+begin_src emacs-lisp

  (use-package lispyville
    :hook (emacs-lisp-mode lisp-mode)
    :config
    (lispyville-set-key-theme
     '(operators
       c-w
       prettify
       commentary
       slurp/barf-cp
       additional
       additional-motions
       additional-insert
       atom-motions
       text-objects)))

#+end_src

* ORG Mode

** Settings

#+begin_src emacs-lisp

  (setq org-hide-emphasis-markers t)
  (add-hook 'org-mode-hook (lambda ()
			     (setq-local electric-pair-mode nil)))

#+end_src

** Org-tempo

#+begin_src emacs-lisp

  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist
	       '("sl" . "src emacs-lisp"))

#+end_src

* Terminal Emacs settings

** Enable mouse integration

#+begin_src emacs-lisp

  (unless (display-graphic-p)
    (gpm-mouse-mode 1)
    (xterm-mouse-mode 1))

#+end_src

** Change cursor based on Evil's current state

#+begin_src emacs-lisp

  (unless (display-graphic-p)
    (use-package evil-terminal-cursor-changer
      :config
      (evil-terminal-cursor-changer-activate)))

#+end_src

** Use /term/ instead of /vterm/

Since /vterm/ only works inside graphical Emacs, enable another emulator if it is launched with -nw.

#+begin_src emacs-lisp

  (unless (display-graphic-p)
    (use-package term))

#+end_src
